Vou colocar as notas aqui provisoriamente, depois decido se faço um markdown para esta parte da matéria

Aula 4, gravação às @01:17:00 horas

unit testing -> o que vamos focar nesta cadeira
test doubles -> objectos que ajudam a minimizar a complexidade dos testes e de certa forma ajudar
                a que os testes sejam independentes do resto do sistema. São exemplos:

stubs - providencia respostas pré-programadas. Se a função receber x deverá retornar Y,
        independentemente do resto do sistema

mocks - espectativas quanto à programação. Usam-se diferentes frameworks, para esta cadeira apenas dois:
        - Mockito, em Java
        - Spock, em Groovy

Aula 5, gravação (ver hoje de tarde)

Testar o sistema (antigamente):
- testar o código sob o ponto de vista do utilizador;
- escrever código que vai exercitar o código que queremos testar, e colocar esse código na main;
Desvantagens deste método antigo:
- difícil de gerir o sistema
- não dá para fazer um roleback do sistema "estragado" pela manipulação dos testes
- muito manual, quase sem automatização

Atualmente:
Usar Spock and JUnit -> permite que o developer se foque apenas no teste

No JUnit
setup (@Before)
run (@Test)
clean up (@After)

No Spock
setup()
test()
cleanUp()



